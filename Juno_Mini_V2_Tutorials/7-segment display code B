/*
//Juno-Mini V2 Pinouts+

//D10-mosfet
//A7-buttonA(0*Vcc)-buttonB(1/2*Vcc)-buttonC(2/3*Vcc)
//A6- 0.1 ohm shunt resistor
//D2-D9 anodes of 7-seg led (or 8 leds)
//A0-A3 cathodes of 7-seg 4 digit

//Nrf24- (CSN=0; CE=1;)
*/

// ===================================
// 7-segment LED display example code
// Other sketch uses 1,126 bytes (13%) of program storage space. Maximum is 8,192 bytes.
// But there are many techniques to lower the memory usage. see other example.
// for example: D2-D7 are PortD.2-7 and D8-D9 are PortB.0-1; A0-A3 are PortC.0-3;
// Using 2 registers from AVR directly, we can save a lot of memory and improve speed.
//DDRx set pins as output/input; PORTx set pins as HIGH/LOW; or With Pull_UP resistor enable/disable.
//This Sketch uses 632 bytes (7%) of program storage space. Maximum is 8,192 bytes.
//Memory saved 494 bytes!!!

// These variables are used for multiflexing the LED display.
byte disCounter=0;
int disTimera=0;
int disTimerb=0;

//4 byte for 4 digits ( to display a number, use digit array mapping, 
//For example: "dg1=digit[1];" will display 1; or you can do this "dg1=B00110000;" 
//it's easier to read and write codes using array mapping)
byte dg1=B00110000; 
byte dg2=B01011011;
byte dg3=B01111001;
byte dg4=B01110100;

//simplify 4 digits into just two: left and right for easier code writing.
byte leftDig; 
byte rightDig;


//byte mapping for the 7-segments led display.
 const byte digit[] =
{
0B00111111, // 0
0B00110000, // 1
0B01011011, // 2
0B01111001, // 3
0B01110100, // 4
0B01101101, // 5
0B01101111, // 6
0B00111000, // 7
0B01111111, // 8
0B01111101, // 9
0B00000000, // BLANK
0B10000000  }; //dot

  
//----SETUPS--------------------------------------
void setup() {

// set D2-D9 as outputs 
// anodes (+) for the LED display
//for (byte x=2; x<10; x++){ 
//pinMode (x, OUTPUT);
//}  
DDRD=0b11111100; // set d2-d7 as output
DDRB=0b00000011; // set d8-d9 as output

// set A0-A3 as outputs (A0=14 in arduino pin number)
// cathodes (-) for the LED display
//for (byte x=14; x<18; x++){  
//pinMode (x, OUTPUT);
//}  
DDRC=0b00001111;// set A0-A4 as output
  
}

void loop() {

// print a testing number: 1234: 
leftDig=12;
rightDig=34;

// This converts 2 digits to 4.
// 1st.12/10=1; 2nd.12%10=2; 3rd. 34/10=3; 4th. 34%10=4;         
dg1=digit[leftDig/10];
dg2=digit[leftDig%10];
dg3=digit[rightDig/10];
dg4=digit[rightDig%10];

 
// LED display code 
// Only 1 led digit is turned on at any moment of the time, 
// but because they are swtiching ON/OFF very quickly (1 millisecond for each digit)
// You have the illustration that they are all on all the time.
// This is called Multiplexing

disTimera=millis();
if(disTimera-disTimerb>=1){
  
disCounter++;
if(disCounter==5)disCounter=0;

disTimerb=disTimera;

// for example: D2-D7 are PortD.2-7 and D8-D9 are PortB.0-1; A0-A3 are PortC.0-3;
//DDRx set pins as output/input; PORTx set pins as HIGH/LOW; or With Pull_UP resistor enable/disable.

if(disCounter==0){
  //digitalWrite(A3, HIGH);  
  PORTC |= 0b00001000; // turn off last digit, which is A3. It's active low, so setting it High=Off;
  
  //for(byte x=2; x<9; x++){ // no need for these codes because low level is fast!!!
  //digitalWrite(x, LOW);
  //} 
  //PORTD &= 0b00000011;
  //PORTB &= 0b11111100;
   
  //for(byte dr=0; dr<8; dr++){
  //digitalWrite(dr+2, bitRead(dg4,dr));  
  //}
  
  // basically a simple assignment. but because this single digit involves Two regisiters, 
  // we need to use bitshift and mask out the values we don't want which are PORTD:0-1 and PORTB:2-5(or d1-d2, D10-d13)
  PORTD = 0b11111100 & (dg4<<2); //dg4= 1234, the fourth number.
  PORTB = 0b00000011 & (dg4>>6);   
  
  
  //digitalWrite(A0, LOW);
  PORTC &= 0b11111110; // turn on this digial. Active low means, LOW=ON;
}

if(disCounter==1){
  PORTC |= 0b00000001;
  
  PORTD = 0b11111100 & (dg3<<2);
  PORTB = 0b00000011 & (dg3>>6);   
  
  PORTC &= 0b11111101;   
}

if(disCounter==2){
  PORTC |= 0b00000010; 
  
  PORTD = 0b11111100 & (dg2<<2);
  PORTB = 0b00000011 & (dg2>>6);   
  
  PORTC &= 0b11111011;   
}

if(disCounter==3){ 
  PORTC |= 0b00000100;
    
  PORTD = 0b11111100 & (dg1<<2);
  PORTB = 0b00000011 & (dg1>>6);   
  
  PORTC &= 0b11110111;   
}


}

}
