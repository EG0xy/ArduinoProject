/*
Introduction:
========================================================================

First set the fuse of the CPU
Fuse for atmega8 (-U lfuse:w:0xe4:m -U hfuse:w:0xd9:m) (LOW:E4  HIGH:D9)
(Check board file for IDE 1.6.3; You may need set your own board file if you are using other version)

Connections:
------------------------------------------------------------------------
DS1302: 
rst - DP1
I/0 - DP2
SCLK- DP3

74HC595- (Controls 1-8 LED; 7-seg(A-G,dot))
latchPin - DP8
clockPin - DP9
dataPin - DP10

7-Seg digits (Active LOW)
Digit 1 - DP4
Digit 2 - DP5
Digit 3 - DP6
Digit 4 - DP7

3 Buttons: (Active LOW)
A-A1
B-A2
C-A3
------------------------------------------------------------------------

Codes for numbers: (Inverted)
    const byte digit[] =
    {
  //DGFEDCBA
  //00111000   
    
    B00111111, // 0
    B00110000, // 1
    B01011011, // 2
    B01111001, // 3
    B01110100, // 4
    B01101101, // 5
    B01101111, // 6
    B00111000, // 7
    B01111111, // 8
    B01111101, // 9
    B00000000, // BLANK
    B01000000, // DASH
    B10000000  }; //dot
    }
------------------------------------------------------------------------
  rtc.halt(false);
  rtc.writeProtect(false);

  rtc.setDOW(FRIDAY);        // Set Day-of-Week to FRIDAY
  rtc.setTime(12, 0, 0);     // Set the time to 12:00:00 (24hr format)

  // Get data from the DS1302
  t = rtc.getTime();
  
  t.dow, DEC
  t.hour, DEC
  t.min, DEC
  t.sec, DEC
  
  
*/

#include "ClickButton.h"
#include <DS1302.h>
DS1302 rtc(1, 2, 3);
Time t;

int latchPin = 8; 
int clockPin = 9; 
int dataPin = 10; 

ClickButton ba(A1, LOW, CLICKBTN_PULLUP);
ClickButton bb(A2, LOW, CLICKBTN_PULLUP);
ClickButton bc(A3, LOW, CLICKBTN_PULLUP);
//------------- Gobal Values ----------------------------------

int mode=0; //5 modes

int secX=0;
int minX=12;
int hrX=12; 
int dowX=1; // day of the week 1-7


int counter=1; // counter for multiplexing switch
int millsec=0;
boolean blinkT=0;

unsigned long t1=0; // timer for multiplexing switch
unsigned long t2=0;

unsigned long t3=0; // internal timing
unsigned long t4=0;

unsigned long t5=0; // blinking timing
unsigned long t6=0;

int ledDisplay=1234;
int ledLeft=0;
int ledRight=0;
int toggle=0;

byte d1=0; // bytes for multiplexing or switching 4 digits LED display
byte d2=0;
byte d3=0;
byte d4=0;

byte dt1=0;
byte dt2=0;
byte dt3=0;
byte dt4=0;

byte dx1=0;
byte dx2=0;
byte dx3=0;
byte dx4=0;

byte leds =B10000000; //day of the week
byte blinker =B10000000; //second blinker

   const byte dowLed[] =
    {
    B00000000,  //na    
    B00000001, // 1
    B00000011, // 2
    B00000111, // 3
    B00001111, // 4
    B00011111, // 5
    B00111111, // 6
    B01111111 }; // 7 
    
    
   const byte digit[] =
    {
    B00111111, // 0
    B00110000, // 1
    B01011011, // 2
    B01111001, // 3
    B01110100, // 4
    B01101101, // 5
    B01101111, // 6
    B00111000, // 7
    B01111111, // 8
    B01111101, // 9
    B00000000, // BLANK
    B10000000  }; //dot

//---------------------------------------------------------------
void setup() {   
 
  pinMode(latchPin, OUTPUT);
  pinMode(clockPin, OUTPUT);
  pinMode(dataPin, OUTPUT);
  
   pinMode(4, OUTPUT);//first digit - Active LOW
   pinMode(5, OUTPUT);//sec digit - Active LOW
   pinMode(6, OUTPUT);//Third digit - Active LOW
   pinMode(7, OUTPUT);//Fourth digit - Active LOW   
   
  ba.multiclickTime = 50;
  bb.multiclickTime = 50; 
  bc.multiclickTime = 50;   
  
t = rtc.getTime();    
 dowX=t.dow;
 hrX=t.hour;
 minX=t.min;
 secX=t.sec;
 
}

//=====================================================================================================
void loop() 
{ 
  
t = rtc.getTime();  

ba.Update();
bb.Update(); 
bc.Update();


 
 
//===========================hr:min display========================================================================

 if(mode==0){
   dt4=B00000000;
   dt1=B10000000;   
   dx1=d1;
   dx2=d2;   
   dx3=d3;
   dx4=d4;
   
   ledLeft=hrX;
   ledRight=minX;   
 }
 
//=========================min:sec display========================================================================== 
 if(mode==1){
   dt1=B00000000;
   dt2=B10000000;  
   dx1=d1;
   dx2=d2;   
   dx3=d3;
   dx4=d4;   
   ledLeft=minX;
   ledRight=secX;    
 }
 
 
//=========================set hr:min==========================================================================
 if(mode==2){    
   dt2=B00000000;
   dt3=B10000000; 
   dx1=d1;
   dx2=d2;   
   dx3=d3;
   dx4=d4;   
 ledLeft=hrX;
 ledRight=minX; 

  if(bb.clicks==1) hrX++;  
  if(bc.clicks==1) minX++; 
  if(ba.clicks==-1) {
    rtc.halt(false);
    rtc.writeProtect(false);
   rtc.setTime(hrX, minX, 0);
  } 
  
 }

//=======================set sec / day of the week============================================================================
 if(mode==3){  //day of the week
   dt3=B00000000;
   dt4=B10000000; 
   dx1=d1;
   dx2=d2;   
   dx3=d3;
   dx4=d4;   
  ledLeft=0;   
  ledRight=dowX; 

  if(bb.clicks==1) dowX--;  
  if(bc.clicks==1) dowX++; 
  if(ba.clicks==-1) {
    rtc.halt(false);
    rtc.writeProtect(false);
    rtc.setDOW(dowX);   
  } 
 } 
    


//===================================================================================================


 ledDisplay=(ledLeft)*100 + ledRight; // 4 digit split into 2: left + right

 d1=digit[ledDisplay/1000]|dt1;          // shiftout 4 digit
 d2=digit[(ledDisplay/100)%10]|dt2;
 d3=digit[(ledDisplay/10)%10]|dt3;
 d4=digit[(ledDisplay%10)]|dt4; 

 leds=dowLed[dowX];
   

    
 //=======================================================
 t1=millis(); // multiplexed throught A1-A4 pins
  if (t1-t2>=1){
   
    counter++;
    if(counter==5) counter=1;
     
    if (counter==1){
    digitalWrite(latchPin, LOW); 
    shiftOut(dataPin, clockPin, MSBFIRST ,leds); //(1-8 red LED
    
    if(blinkT==0){
    shiftOut(dataPin, clockPin, MSBFIRST ,d4);} //(A-G, Dot, 7-seg LED)   
    if(blinkT==1){
    shiftOut(dataPin, clockPin, MSBFIRST ,dx4);} //(A-G, Dot, 7-seg LED)
    
    digitalWrite(latchPin, HIGH);      
    digitalWrite(4, LOW);    
    digitalWrite(7, HIGH);     
    digitalWrite(latchPin, HIGH);     
    }
    
    if (counter==2){
    digitalWrite(latchPin, LOW); 
    shiftOut(dataPin, clockPin, MSBFIRST ,leds); //(1-8 red LEDs)
    if(blinkT==0){
    shiftOut(dataPin, clockPin, MSBFIRST ,d3);} //(A-G, Dot, 7-seg LED)   
    if(blinkT==1){
    shiftOut(dataPin, clockPin, MSBFIRST ,dx3);} //(A-G, Dot, 7-seg LED) 
    digitalWrite(latchPin, HIGH);   
    digitalWrite(5, LOW);  
    digitalWrite(4, HIGH);     
    digitalWrite(latchPin, HIGH);     
    }    
    
    if (counter==3){
    digitalWrite(latchPin, LOW); 
    shiftOut(dataPin, clockPin, MSBFIRST ,leds); //(1-8 red LEDs)
    if(blinkT==0){
    shiftOut(dataPin, clockPin, MSBFIRST ,d2);} //(A-G, Dot, 7-seg LED)   
    if(blinkT==1){
    shiftOut(dataPin, clockPin, MSBFIRST ,dx2);} //(A-G, Dot, 7-seg LED) 
    digitalWrite(latchPin, HIGH);     
    digitalWrite(6, LOW); 
    digitalWrite(5, HIGH); 
    digitalWrite(latchPin, HIGH);     
    }        

    if (counter==4){
    digitalWrite(latchPin, LOW); 
    shiftOut(dataPin, clockPin, MSBFIRST ,leds); //(1-8 red LEDs)
    if(blinkT==0){
    shiftOut(dataPin, clockPin, MSBFIRST ,d1);} //(A-G, Dot, 7-seg LED)   
    if(blinkT==1){
    shiftOut(dataPin, clockPin, MSBFIRST ,dx1);} //(A-G, Dot, 7-seg LED) 
    digitalWrite(latchPin, HIGH);      
    digitalWrite(7, LOW);  
    digitalWrite(6, HIGH);     
    digitalWrite(latchPin, HIGH);     
    }        
        
  t2=t1;
  }
  
 //=======================================================   
 t3=millis(); // second timer
  if (t3-t4>=1000){
    secX++;
    
  t4=t3;  
  }

 //=======================================================   
 t5=millis(); // blinker timer
  if (t5-t6>=100){
    blinkT=!blinkT;
    
  t6=t5;  
  }    
  
 //=======================================================  
 
  if(mode==4)mode=0;
  if(dowX==8)dowX=1;
  if(dowX==0)dowX=7;
    
  if(ba.clicks==1) mode++; 
    
       
}
